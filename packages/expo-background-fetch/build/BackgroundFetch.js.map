{"version":3,"file":"BackgroundFetch.js","sourceRoot":"","sources":["../src/BackgroundFetch.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,kBAAkB,EAAE,MAAM,WAAW,CAAC;AACzD,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAEhD,MAAM,EAAE,mBAAmB,EAAE,eAAe,EAAE,GAAG,kBAAkB,CAAC;AAEpE,MAAM,CAAN,IAAY,MAIX;AAJD,WAAY,MAAM;IAChB,uCAAU,CAAA;IACV,yCAAW,CAAA;IACX,uCAAU,CAAA;AACZ,CAAC,EAJW,MAAM,KAAN,MAAM,QAIjB;AAED,MAAM,CAAN,IAAY,MAIX;AAJD,WAAY,MAAM;IAChB,uCAAU,CAAA;IACV,+CAAc,CAAA;IACd,6CAAa,CAAA;AACf,CAAC,EAJW,MAAM,KAAN,MAAM,QAIjB;AAED,MAAM,CAAC,KAAK,UAAU,cAAc;IAClC,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KAC9B;IACD,OAAO,eAAe,CAAC,cAAc,EAAE,CAAC;AAC1C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,eAAuB;IACnE,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,OAAO,CAAC,IAAI,CAAC,iEAAiE,CAAC,CAAC;QAChF,OAAO,IAAI,CAAC;KACb;IACD,OAAO,eAAe,CAAC,uBAAuB,CAAC,eAAe,CAAC,CAAC;AAClE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,QAAgB;IACtD,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,OAAO,CAAC,IAAI,CAAC,iEAAiE,CAAC,CAAC;QAChF,OAAO,IAAI,CAAC;KACb;IACD,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;QACxC,MAAM,IAAI,KAAK,CACb,SAAS,QAAQ,2FAA2F,CAC7G,CAAC;KACH;IACD,OAAO,eAAe,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AACrD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,QAAgB;IACxD,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,OAAO,CAAC,IAAI,CAAC,iEAAiE,CAAC,CAAC;QAChF,OAAO,IAAI,CAAC;KACb;IACD,OAAO,eAAe,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AACvD,CAAC","sourcesContent":["import { Platform, NativeModulesProxy } from 'expo-core';\nimport { TaskManager } from 'expo-task-manager';\n\nconst { ExpoBackgroundFetch: BackgroundFetch } = NativeModulesProxy;\n\nexport enum Result {\n  NoData = 1,\n  NewData = 2,\n  Failed = 3,\n}\n\nexport enum Status {\n  Denied = 1,\n  Restricted = 2,\n  Available = 3,\n}\n\nexport async function getStatusAsync(): Promise<Status | null> {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve(null);\n  }\n  return BackgroundFetch.getStatusAsync();\n}\n\nexport async function setMinimumIntervalAsync(minimumInterval: number): Promise<null> {\n  if (Platform.OS !== 'ios') {\n    console.warn('expo-background-fetch is not yet available on Android platform.');\n    return null;\n  }\n  return BackgroundFetch.setMinimumIntervalAsync(minimumInterval);\n}\n\nexport async function registerTaskAsync(taskName: string): Promise<null> {\n  if (Platform.OS !== 'ios') {\n    console.warn('expo-background-fetch is not yet available on Android platform.');\n    return null;\n  }\n  if (!TaskManager.isTaskDefined(taskName)) {\n    throw new Error(\n      `Task '${taskName}' is not defined. You must define a task using TaskManager.defineTask before registering.`\n    );\n  }\n  return BackgroundFetch.registerTaskAsync(taskName);\n}\n\nexport async function unregisterTaskAsync(taskName: string): Promise<null> {\n  if (Platform.OS !== 'ios') {\n    console.warn('expo-background-fetch is not yet available on Android platform.');\n    return null;\n  }\n  return BackgroundFetch.unregisterTaskAsync(taskName);\n}\n"]}
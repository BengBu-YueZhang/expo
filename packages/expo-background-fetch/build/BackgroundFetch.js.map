{"version":3,"file":"BackgroundFetch.js","sourceRoot":"","sources":["../src/BackgroundFetch.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,kBAAkB,EAAE,MAAM,WAAW,CAAC;AACzD,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAEhD,MAAM,EAAE,mBAAmB,EAAE,GAAG,kBAAkB,CAAC;AAEnD,IAAK,MAIJ;AAJD,WAAK,MAAM;IACT,uCAAU,CAAA;IACV,yCAAW,CAAA;IACX,uCAAU,CAAA;AACZ,CAAC,EAJI,MAAM,KAAN,MAAM,QAIV;AAED,IAAK,MAIJ;AAJD,WAAK,MAAM;IACT,uCAAU,CAAA;IACV,+CAAc,CAAA;IACd,6CAAa,CAAA;AACf,CAAC,EAJI,MAAM,KAAN,MAAM,QAIV;AAED,KAAK,UAAU,cAAc;IAC3B,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC1B;IACD,OAAO,mBAAmB,CAAC,cAAc,EAAE,CAAC;AAC9C,CAAC;AAED,KAAK,UAAU,uBAAuB,CAAC,eAAuB;IAC5D,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,OAAO,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;QACzE,OAAO;KACR;IACD,MAAM,mBAAmB,CAAC,uBAAuB,CAAC,eAAe,CAAC,CAAC;AACrE,CAAC;AAED,KAAK,UAAU,iBAAiB,CAAC,QAAgB;IAC/C,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,OAAO,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;QACzE,OAAO;KACR;IACD,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;QACxC,MAAM,IAAI,KAAK,CACb,SAAS,QAAQ,2FAA2F,CAC7G,CAAC;KACH;IACD,MAAM,mBAAmB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AACxD,CAAC;AAED,KAAK,UAAU,mBAAmB,CAAC,QAAgB;IACjD,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,OAAO,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;QACzE,OAAO;KACR;IACD,MAAM,mBAAmB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AAC1D,CAAC;AAED,MAAM,CAAC,MAAM,eAAe,GAAG;IAC7B,QAAQ;IACR,MAAM;IACN,MAAM;IAEN,UAAU;IACV,cAAc;IACd,uBAAuB;IACvB,iBAAiB;IACjB,mBAAmB;CACpB,CAAC","sourcesContent":["import { Platform, NativeModulesProxy } from 'expo-core';\nimport { TaskManager } from 'expo-task-manager';\n\nconst { ExpoBackgroundFetch } = NativeModulesProxy;\n\nenum Result {\n  NoData = 1,\n  NewData = 2,\n  Failed = 3,\n}\n\nenum Status {\n  Denied = 1,\n  Restricted = 2,\n  Available = 3,\n}\n\nasync function getStatusAsync(): Promise<Status | void> {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve();\n  }\n  return ExpoBackgroundFetch.getStatusAsync();\n}\n\nasync function setMinimumIntervalAsync(minimumInterval: number): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    console.warn(`expo-background-fetch is currently available only on iOS`);\n    return;\n  }\n  await ExpoBackgroundFetch.setMinimumIntervalAsync(minimumInterval);\n}\n\nasync function registerTaskAsync(taskName: string): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    console.warn(`expo-background-fetch is currently available only on iOS`);\n    return;\n  }\n  if (!TaskManager.isTaskDefined(taskName)) {\n    throw new Error(\n      `Task '${taskName}' is not defined. You must define a task using TaskManager.defineTask before registering.`\n    );\n  }\n  await ExpoBackgroundFetch.registerTaskAsync(taskName);\n}\n\nasync function unregisterTaskAsync(taskName: string): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    console.warn(`expo-background-fetch is currently available only on iOS`);\n    return;\n  }\n  await ExpoBackgroundFetch.unregisterTaskAsync(taskName);\n}\n\nexport const BackgroundFetch = {\n  // enums\n  Result,\n  Status,\n\n  // methods\n  getStatusAsync,\n  setMinimumIntervalAsync,\n  registerTaskAsync,\n  unregisterTaskAsync,\n};\n"]}